const h={normal:["normal","italic","oblique"],italic:["italic","oblique","normal"],oblique:["oblique","italic","normal"]};function b(t,n){if(!t||!n.length)return;const o=u(t),l=f(t);if(isNaN(o)||!l)return;const e={};n.forEach(r=>{const i=u(r),c=f(r);!isNaN(i)&&c&&(e[i]||(e[i]={}),e[i][c]=r)});let a=1,s=o,g=o>=500?1:-1;for(;a<20&&!e[s];)s+=a*g*100,g*=-1,a+=1;const F=h[l]||[];for(let r=0,i=F.length;r<i;r++){const c=e[s][F[r]];if(c)return c}}function q(t){let n=[];return["n4","n7"].forEach(o=>{const l=b(o,t);if(l){const e=u(l);n=n.concat(m(e,t))}}),[...new Set(n)]}function m(t,n){return n.filter(o=>u(o)==t)}function f(t){return t[0]==="n"?"normal":t[0]==="i"?"italic":t[0]==="o"?"oblique":void 0}function u(t){return parseInt(`${t[1]}00`,10)}const p=Object.freeze(Object.defineProperty({__proto__:null,getClosestFVD:b,getClosestToBasicFour:q,getFVDsWithWeight:m,getStyleFromFVD:f,getWeightFromFVD:u},Symbol.toStringTag,{value:"Module"}));export{p as F,u as a,f as h,q};
//# sourceMappingURL=FVDHelper-BCOogx9w.js.map
